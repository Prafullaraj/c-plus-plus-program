You are given a read only array of n integers from 1 to n.

Each integer appears exactly once except A which appears twice and B which is missing.

Return A and B.

Note: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Note that in your output A should precede B.

Example:

Input:[3 1 2 5 3] 

Output:[3, 4] 

A = 3, B = 4

struct Solution {
  vector<int> repeatedNumber(vector<int> &A) {
      /* write your solution here */
      int i,j,k,sum=0,x=0,y;
      int n=A.size();
      k= n*(n+1)/2;
      int b[n];
      vector<int> c;
      for(i=1;i<=n;i++)
      {
          b[i]=i;
      }
      for(i=1;i<=n;i++)
      {
          for(j=0;j<n;j++)
          {
              if(b[i]==A[j])
              {
                  b[i]='*';
                  break;
              }
          }
      }
       for(i=1;i<=n;i++)
      {
          if(b[i]!='*')
          {
             x=b[i]; 
          }
      }
     
     for ( i = 0; i< n; i++) {
        sum += A[i]; 
        }
        sum=sum+x;
        y=sum-k;
       c.push_back(y);
        c.push_back(x);
        return c;
  }
};
